scale_color_discrete(labels = c("A", "B", "C", "D", "E")) +
labs(color = "Diamond Cuts")
# Can also change color/fill values
ggplot(data = diamonds, aes(x = clarity, fill=cut)) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("blue", "green", "red",
"lightcoral", "skyblue"))
# Change legend info
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E"))
# Can also change color/fill values
ggplot(data = diamonds, aes(x = clarity, fill=cut)) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("blue", "green", "red",
"lightcoral", "skyblue"))
# The labs function allows us to add titles and change labels
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E")) +
labs(x = "Carat", y = "Price ($)", title = "Price by Carat",
color = "Cut")
# Theme arguments allow us to change up visual characteristics
# We can use it to adjust title positions and angles
ggplot(data = diamonds, aes(x = cut)) +
geom_histogram(stat = "count", fill = "lightcoral", col = "black") +
labs(title = "Count of Diamond Cuts") +
theme(plot.title = element_text(hjust = .5),
axis.text.x = element_text(angle = 45, hjust = 1))
# Can also adjust things like font, color, or legend position
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
theme(legend.position = "top",
axis.title.y = element_text(face = "bold", color = "red"),
axis.text.x = element_text(size = 100))
# First need to make sure we have ggplot2 installed and loaded
# Part of the tidyverse series of packages
library(tidyverse)
# We'll be using the diamonds dataset to introduce ggplot2
data("diamonds")
?diamonds
# Take a sample from diamonds
# Planning on doing some advanced plots that can take time with a
# large dataset
set.seed(1234)
diamonds <- diamonds %>%
sample_n(size = 1000, replace = F)
# Let's start by creating a scatterplot comparing price and carat
# We start by calling the ggplot command
# "+" is used to string code into larger chuncks
ggplot(data = diamonds, aes(x = carat, y = price)) +
# Now we'll specify the designated geom; think of this as the type of plot
# you want
geom_point()
# Let's start by creating a scatterplot comparing price and carat
# We start by calling the ggplot command
# "+" is used to string code into larger chuncks
ggplot(data = diamonds, aes(x = carat, y = price)) +
# Now we'll specify the designated geom; think of this as the type of plot
# you want
geom_point()
# We can add additional aesthetics, such as shape or color
ggplot(data = diamonds, aes(x = carat, y = price,
shape = cut, color = clarity)) +
geom_point()
# Histogram
ggplot(data = diamonds, aes(x = price)) +
geom_histogram()
# We can specify the number of bins with a histogram
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(bins = 1)
# Barplots
ggplot(data = diamonds, aes(x = cut)) +
geom_bar()
# Density plot
ggplot(data = diamonds, aes(x = price)) +
geom_density()
# Barplots
ggplot(data = diamonds, aes(x = cut)) +
geom_bar()
# We can create different filled bar plots by specifying the position argument
# Stacked bar
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "stack")
# 100% filled bar
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "fill")
# Plot fill levels next to instead of on top of each other
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
# Boxplots
ggplot(data = diamonds, aes(x = cut, y = price)) +
#geom_point()
geom_boxplot()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price), size = 2) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price), size = 10) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point(size = 2) +
# Than plot the smooth line
geom_smooth()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
ggplot(data = diamonds, aes(x = carat, y = price), size = 2) +
# First plot the points
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price), size = 2) +
# First plot the points
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price), col = "red") +
# First plot the points
geom_point()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price, col = "red")) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price, col = "grenn")) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price, col = "green")) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# Let's take the carat/price scatter plot and facet it on cut
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_wrap(~ cut) +
geom_smooth()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
ggplot(aes(x = height, y = weight)) +
geom_point(color = "blue")
diamonds %>% ggplot(aes(x = height, y = weight)) +
geom_point(color = "blue")
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point(color = "blue")
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# Let's take the carat/price scatter plot and facet it on cut
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_wrap(~ cut) +
geom_smooth()
# Scale arguments can help us do a couple things:
# Change labels
ggplot(data = diamonds, aes(x = cut)) +
geom_bar(fill = "lightcoral") +
scale_x_discrete(labels = c("A", "B", "C", "D", "E"))
# Change scale limits
# Discrete
ggplot(data = diamonds, aes(x = cut)) +
geom_bar(fill = "lightcoral") +
scale_x_discrete(limits = c("Fair", "Good"))
# Continous
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_boxplot(fill = "skyblue") +
scale_y_continuous(limits = c(1000, 1500))
# Change legend info
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E"))
# Can also change color/fill values
ggplot(data = diamonds, aes(x = clarity, fill=cut)) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("blue", "green", "red",
"lightcoral", "skyblue"))
# The labs function allows us to add titles and change labels
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E")) +
labs(x = "Carat", y = "Price ($)", title = "Price by Carat",
color = "Cut")
# Theme arguments allow us to change up visual characteristics
# We can use it to adjust title positions and angles
ggplot(data = diamonds, aes(x = cut)) +
geom_histogram(stat = "count", fill = "lightcoral", col = "black") +
labs(title = "Count of Diamond Cuts") +
theme(plot.title = element_text(hjust = .5),
axis.text.x = element_text(angle = 45, hjust = 1))
# Can also adjust things like font, color, or legend position
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
theme(legend.position = "top",
axis.title.y = element_text(face = "bold", color = "red"),
axis.text.x = element_text(size = 100))
# First need to make sure we have ggplot2 installed and loaded
# Part of the tidyverse series of packages
library(tidyverse)
# We'll be using the diamonds dataset to introduce ggplot2
data("diamonds")
?diamonds
# Take a sample from diamonds
# Planning on doing some advanced plots that can take time with a
# large dataset
set.seed(1234)
diamonds <- diamonds %>%
sample_n(size = 1000, replace = F)
# Let's start by creating a scatterplot comparing price and carat
# We start by calling the ggplot command
# "+" is used to string code into larger chuncks
ggplot(data = diamonds, aes(x = carat, y = price)) +
# Now we'll specify the designated geom; think of this as the type of plot
# you want
geom_point()
plot(diamonds$carat, diamonds$price)
# We can add additional aesthetics, such as shape or color
ggplot(data = diamonds, aes(x = carat, y = price,
shape = cut, color = clarity)) +
geom_point()
# Let's start by creating a scatterplot comparing price and carat
# We start by calling the ggplot command
# "+" is used to string code into larger chuncks
ggplot(data = diamonds, aes(x = carat, y = price)) +
# Now we'll specify the designated geom; think of this as the type of plot
# you want
geom_point(color = "blue")
# Let's start by creating a scatterplot comparing price and carat
# We start by calling the ggplot command
# "+" is used to string code into larger chuncks
diamonds %>%
ggplot(aes(x = carat, y = price)) +
# Now we'll specify the designated geom; think of this as the type of plot
# you want
geom_point(color = "blue")
# Let's start by creating a scatterplot comparing price and carat
# We start by calling the ggplot command
# "+" is used to string code into larger chuncks
diamonds %>%
filter(price > 5000) %>%
ggplot(aes(x = carat, y = price)) +
# Now we'll specify the designated geom; think of this as the type of plot
# you want
geom_point(color = "blue")
# Histogram
ggplot(data = diamonds, aes(x = price)) +
geom_histogram()
# Density plot
ggplot(data = diamonds, aes(x = price)) +
geom_density()
# Barplots
ggplot(data = diamonds, aes(x = cut)) +
geom_bar()
# We can create different filled bar plots by specifying the position argument
# Stacked bar
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "stack")
# 100% filled bar
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "fill")
# Plot fill levels next to instead of on top of each other
ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
diamonds$cut
# Boxplots
ggplot(data = diamonds, aes(x = cut, y = price)) +
#geom_point()
geom_boxplot()
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth()
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
# First plot the points
geom_point() +
# Than plot the smooth line
geom_smooth(size = 2)
# We can layer plots of different types on each other
# For example, say we wanted to layer both a smooth line on top of a
# scatterplot
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_smooth(size = 2) +
# First plot the points
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_wrap(~ cut)
# Let's take the carat/price scatter plot and facet it on cut
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_wrap(~ cut) +
geom_smooth()
ggplot(data = diamonds, aes(x = cut)) +
geom_bar(fill = "lightcoral")
# Scale arguments can help us do a couple things:
# Change labels
ggplot(data = diamonds, aes(x = cut)) +
geom_bar(fill = "lightcoral") +
scale_x_discrete(labels = c("A", "B", "C", "D", "E"))
ggplot(data = diamonds, aes(x = cut)) +
geom_bar(fill = "lightcoral")
# Change scale limits
# Discrete
ggplot(data = diamonds, aes(x = cut)) +
geom_bar(fill = "lightcoral") +
scale_x_discrete(limits = c("Fair", "Good"))
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_boxplot(fill = "skyblue")
# Continous
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_boxplot(fill = "skyblue") +
scale_y_continuous(limits = c(1000, 1500))
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point()
# Change legend info
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E"))
ggplot(data = diamonds, aes(x = clarity, fill=cut)) +
geom_bar(position = "stack")
# Can also change color/fill values
ggplot(data = diamonds, aes(x = clarity, fill=cut)) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("blue", "green", "red",
"lightcoral", "skyblue"))
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E")) +
()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E"))
# The labs function allows us to add titles and change labels
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
scale_color_discrete(labels = c("A", "B", "C", "D", "E")) +
labs(x = "Carat", y = "Price ($)", title = "Price by Carat",
color = "Cut")
# Theme arguments allow us to change up visual characteristics
# We can use it to adjust title positions and angles
ggplot(data = diamonds, aes(x = cut)) +
geom_histogram(stat = "count", fill = "lightcoral", col = "black") +
labs(title = "Count of Diamond Cuts") +
theme(plot.title = element_text(hjust = .5),
axis.text.x = element_text(angle = 45, hjust = 1))
# Can also adjust things like font, color, or legend position
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
theme(legend.position = "top",
axis.title.y = element_text(face = "bold", color = "red"),
axis.text.x = element_text(size = 100))
# Continous
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_boxplot(fill = "skyblue") +
scale_y_continuous(limits = c(1000, 1500))
rnorm(10)
rnorm(10)
set.seed(123)
rnorm(10)
set.seed(123)
rnorm(10)
14.7/15
19*19
13.3/15
13.2/15
13.3/15
#Q5
# We specify argument names inside function()
test_function <- function(x,y) {
#Whatever is inside the {} is what the function does
x + 6
y * 2
}
#Put it into a list
test_list = list(test_function)
test_list
12/15
13.6/15
13.7/15
library(tidyverse)
getwd()
setwd("C:/Users/jcamp/OneDrive/Documents/Basketball Projects/march_madness_20")
teams <- read_csv("data/MDataFiles_Stage1/MTeams.csv")
seeds <- read_csv("data/MDataFiles_Stage1/MNCAATourneySeeds.csv")
rs_results <- read_csv("data/MDataFiles_Stage1/MRegularSeasonDetailedResults.csv")
tourney_results <- read_csv("data/MDataFiles_Stage1/MNCAATourneyCompactResults.csv")
sample_sub <- read_csv("data/MSampleSubmissionStage1_2020.csv")
# Finding the average box-score results for each team and each season
# Data is separated by winners and losers
bs_avg <- rs_results %>%
# Rename all winners as 1 and all losers as 2
rename_at(.vars = vars(starts_with("W")),
.funs = ~ gsub(pattern = "W", replacement = "team1_", x = .)) %>%
rename_at(.vars = vars(starts_with("L")),
.funs = ~ gsub(pattern = "L", replacement = "team2_", x = .)) %>%
# Binding a tibble where we do the exact opposite
# This allows a team to be listed as 1 for wins AND losses
bind_rows(rs_results %>%
rename_at(.vars = vars(starts_with("W")),
.funs = ~ gsub(pattern = "W",
replacement = "team2_", x = .)) %>%
rename_at(.vars = vars(starts_with("L")),
.funs = ~ gsub(pattern = "L",
replacement = "team1_", x = .))) %>%
# Grouping by team1 and season
group_by(team1_TeamID, Season) %>%
# Finding the mean of all counting stats
summarize_at(.vars = vars(team1_Score, team2_Score, team1_FGM:team2_PF),
.funs = ~ mean(., na.rm = T))
# Creating a wins and losses dataframe for every team
outcome <- rs_results %>%
# Counting number of times a team had a winning ID
group_by(WTeamID, Season) %>%
summarize(W = n()) %>%
# Joining number of times team had a losing ID
inner_join(rs_results %>%
group_by(LTeamID, Season) %>%
summarize(L = n()), by = c("WTeamID" = "LTeamID", "Season"))
# Combining data sets into a season summary data set
season_summary <- teams %>%
inner_join(seeds, by = "TeamID") %>%
inner_join(outcome, by = c("TeamID" = "WTeamID", "Season")) %>%
inner_join(bs_avg, by = c("TeamID" = "team1_TeamID", "Season")) %>%
rename_at(.vars = vars(starts_with("team1")),
.funs = ~ gsub(pattern = "team1_", replacement = "", x = .)) %>%
rename_at(.vars = vars(starts_with("team2")),
.funs = ~ gsub(pattern = "team2",
replacement = "opponent", x = .)) %>%
# Calculating percentages
mutate(FGP = FGM / FGA, FG3P = FGM3 / FGA3, FTP = FTM / FTA,
opponent_FGP = opponent_FGM / opponent_FGA,
opponent_FG3P = opponent_FGM3 / opponent_FGA3,
opponent_FTP = opponent_FTM / opponent_FTA,
WP = W / (W + L)) %>%
# Getting seeds to be numeric
# Have to remove region character
mutate(Seed = substring(Seed, 2)) %>%
mutate(Seed = as.numeric(gsub(pattern = "a|b", replacement = "", x = Seed)))
